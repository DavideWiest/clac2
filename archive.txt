interpreter: 

let buildArgs evalCtx (argsBefore: DefinedValue array) (signature: FnType array) : FullClacResult<DefinedValue array> =
        if argsBefore.Length = signature.Length - 1 then argsBefore |> Ok else
        
        argsBefore[signature.Length - 2]
        |> definedValueFnToReference evalCtx
        |> bind (fun startFn -> eval evalCtx startFn argsBefore[signature.Length - 1..])
        |> map (fun lastArg -> Array.concat [argsBefore[0..signature.Length - 3]; [| lastArg |]])

middle end: checkManipulation

            // prevent Array.last from throwing exception
            if inputSignature.Length = 0 then Some (IntermediateExcFPPure ("Too many arguments for function " + f) line) else

            // check the other types
            let typesUntilLastMatch = typesMatch inputSignature[..inputSignature.Length-2] typesOfArgs[..typesOfArgs.Length-2] f
            if typesUntilLastMatch |> Option.isSome then typesUntilLastMatch |> Option.map (IntermediateExcMaybeLine line) else

            // if too many arguments exist, try to pass them into the last argument
            let lastArg = args |> Array.last

            match lastArg with
            | Fn f' -> 
                let lastInputType = inputSignature |> Array.last
                let outputSignature' = functionSignatureMap[f'] |> Array.last

                if lastInputType <> outputSignature' then Some(IntermediateExcFPPure (sprintf "Argument type mismatch: Expected %A, but got %A. Trying to push superfluous arguments of function %s to last element." lastInputType outputSignature' f) line) else

                checkManipulation customFnsMap functionSignatureMap m[inputSignature.Length..]

middle end: entry Fn

        let customFnsMap = 
            program.secondaryFiles
            |> Array.map (fun f -> f.content.assignments)
            |> Array.concat
            |> Array.append file.assignments
            |> Array.map (fun x -> x.name, x) 
            |> Map.ofArray

middle end: checkManipulation match m[0] with Fn ...

            let innerManipCorrect = checkManipulation typeCheckingCtx m' line
            if innerManipCorrect.IsSome then innerManipCorrect else
            if m.Length = 1 then None else
            
            // match signature
            match ReferenceToFnType typeCheckingCtx line m'[0] with
            | Error e -> Some (e)
            | Ok(Function fs) -> 
                let remainingSignature = fs[..fs.Length-2]

                if remainingSignature.Length <> m.Length - 1 then Some (IntermediateExcFPPure ("Invalid number of arguments for: " + (manipulationToString m')) line) else
                
                typesMatch remainingSignature m[1..] f line |> Option.map (IntermediateExc line)
            | Ok(BaseFnType t) -> Some (IntermediateExcFPPure ("Function " + (manipulationToString m') + " received too many arguments.") line)

middle end:

    let ReferenceToFnType (typeCheckingCtx: TypeCheckingCtx) line (x: Reference) : IntermediateClacResult<FnType> =
        // variables are treated as functions in the reference type, but not in the fntype type
        let returnSig (s: Signature) = if s.Length = 1 then Ok s[0] else Ok (Function s)

        match x with
        | Fn f -> 
            if isPrimitive f then Ok (getValidatedPrimitiveType f) else
            returnSig typeCheckingCtx.signatures[f]
        | Manipulation m ->
            match checkManipulation typeCheckingCtx m line with
            | Some e -> Error e
            | None -> ReferenceToFnType typeCheckingCtx line m[0]